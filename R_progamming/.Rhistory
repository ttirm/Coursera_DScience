unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
bye
bye()
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply()
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(pants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS, 26)
sample(LETTERS)
sample(c(0,1),100, prob = c(0.3,0.7))
flips <- sample(c(0,1),100, prob = c(0.3,0.7))
flips <- sample(c(0,1),100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips=1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(size = 100, size=1, prob = 0.7)
flips2 <- rbinom(size = 100, size = 1, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, and prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100,25)
rpois(5,mean=10,)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x= cars$speed, y = cars$dist)
plot(y= cars$speed, x = cars$dist)
plot(x= cars$speed, y = cars$dist, xxlab = "Speed")
plot(x= cars$speed, y = cars$dist, xlab = "Speed")
plot(x= cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x= cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x= cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My plot")
plot(cars, main = "My plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
plaY()
play()
str(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = cars)
boxplot(formula = mpg ~ cyl, data = cars)
boxplot(formula = mpg ~ cyl, data = mtcars)
his(mtcars$mpg)
hist(mtcars$mpg)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swir()
swirl()
require(caret)
install.packages("pbkrtest")
require(caret)
install.packages("caret", dependencies = TRUE)
require(caret)
install.packages("nloptr")
require(caret)
set.seed(23)
training.rows <- createDataPartition(df.train.munged$Survived, p = 0.8, list = FALSE)
df.train <- featureEngrg(df.train)
train.keeps <- c("Fate", "Sex", "Boat.dibs", "Age", "Title",
"Class", "Deck", "Side", "Fare", "Fare.pp",
"Embarked", "Family")
df.train.munged <- df.train[train.keeps]
readData <- function(path.name, file.name, column.types, missing.types) {
read.csv( url( paste(path.name, file.name, sep="") ),
colClasses=column.types,
na.strings=missing.types )
}
Titanic.path <- "https://raw.githubusercontent.com/ttirm/Titanic_Kaggle/master/data/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]     # # no Survived column in test.csv
train.raw <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
df.train <- train.raw
test.raw <- readData(Titanic.path, test.data.file, test.column.types, missing.types)
df.infer <- test.raw
install.packages("Amelia")
library(Amelia)
require(Amelia)
missmap(df.train, main="Titanic Training Data - Missings Map",
col=c("yellow", "black"), legend=FALSE)
readData <- function(path.name, file.name, column.types, missing.types) {
read.csv( url( paste(path.name, file.name, sep="") ),
colClasses=column.types,
na.strings=missing.types )
}
Titanic.path <- "https://raw.githubusercontent.com/ttirm/Titanic_Kaggle/master/data/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]     # # no Survived column in test.csv
train.raw <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
df.train <- train.raw
test.raw <- readData(Titanic.path, test.data.file, test.column.types, missing.types)
df.infer <- test.raw
barplot(table(df.train$Survived),
names.arg = c("Perished", "Survived"),
main="Survived (passenger fate)", col="black")
barplot(table(df.train$Pclass),
names.arg = c("first", "second", "third"),
main="Pclass (passenger traveling class)", col="firebrick")
barplot(table(df.train$Sex), main="Sex (gender)", col="darkviolet")
hist(df.train$Age, main="Age", xlab = NULL, col="brown")
barplot(table(df.train$SibSp), main="SibSp (siblings + spouse aboard)",
col="darkblue")
barplot(table(df.train$Parch), main="Parch (parents + kids aboard)",
col="gray50")
hist(df.train$Fare, main="Fare (fee paid for ticket[s])", xlab = NULL,
col="darkgreen")
barplot(table(df.train$Embarked),
names.arg = c("Cherbourg", "Queenstown", "Southampton"),
main="Embarked (port of embarkation)", col="sienna")
#mosaic - relation survived passengers per class
mosaicplot(df.train$Pclass ~ df.train$Survived,
main="Passenger Fate by Traveling Class", shade=FALSE,
color=TRUE, xlab="Pclass", ylab="Survived")
#mosaic - relation survived passengers per sex
mosaicplot(df.train$Sex ~ df.train$Survived,
main="Passenger Fate by Gender", shade=FALSE, color=TRUE,
xlab="Sex", ylab="Survived")
#passenger's age doesn't seem to have a decisive influence in their fate
boxplot(df.train$Age ~ df.train$Survived,
main="Passenger Fate by Age",
xlab="Survived", ylab="Age")
#mosaic - relation survived passengers per ports of embarkation
mosaicplot(df.train$Embarked ~ df.train$Survived,
main="Passenger Fate by Port of Embarkation",
shade=FALSE, color=TRUE, xlab="Embarked", ylab="Survived")
require(corrgram)
corrgram.data <- df.train
## change features of factor type to numeric type for inclusion on correlogram
corrgram.data$Survived <- as.numeric(corrgram.data$Survived)
corrgram.data$Pclass <- as.numeric(corrgram.data$Pclass)
corrgram.data$Embarked <- revalue(corrgram.data$Embarked,
c("C" = 1, "Q" = 2, "S" = 3))
## generate correlogram
corrgram.vars <- c("Survived", "Pclass", "Sex", "Age",
"SibSp", "Parch", "Fare", "Embarked")
corrgram(corrgram.data[,corrgram.vars], order=FALSE,
lower.panel=panel.ellipse, upper.panel=panel.pie,
text.panel=panel.txt, main="Titanic Training Data")
#Replacing missing Ages
summary(df.train$Age)
## function for extracting honorific (i.e. title) from the Name feature
getTitle <- function(data) {
title.dot.start <- regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)
title.comma.end <- title.dot.start + attr(title.dot.start, "match.length")-1
data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)
return (data$Title)
}
df.train$Title <- getTitle(df.train)
unique(df.train$Title)
# Age by title
options(digits=2)
require(Hmisc)
bystats(df.train$Age, df.train$Title, fun=function(x)c(Mean=mean(x),Median=median(x)))
titles.na.train <- c("Dr", "Master", "Mrs", "Miss", "Mr")
imputeMedian <- function(impute.var, filter.var, var.levels) {
for (v in var.levels) {
impute.var[ which( filter.var == v)] <- impute(impute.var[ which( filter.var == v)])
}
return (impute.var)
}
# Drs ages
df.train$Age[which(df.train$Title=="Dr")]
df.train$Age <- imputeMedian(df.train$Age, df.train$Title,  titles.na.train)
df.train$Age[which(df.train$Title=="Dr")]
summary(df.train$Age)
#replace the NA embarkment place with the most common place "S"
summary(df.train$Embarked)
df.train$Embarked[which(is.na(df.train$Embarked))] <- 'S'
summary(df.train$Fare)
subset(df.train, Fare < 7)[order(subset(df.train, Fare < 7)$Fare,
subset(df.train, Fare < 7)$Pclass),  c("Age", "Title", "Pclass", "Fare")]
## Zero fares sugest errors, so we are going to impute missings on Fare feature with median fare by Pclass
df.train$Fare[ which( df.train$Fare == 0 )] <- NA
df.train$Fare <- imputeMedian(df.train$Fare, df.train$Pclass, as.numeric(levels(df.train$Pclass)))
#factorize the titles
df.train$Title <- factor(df.train$Title,
c("Capt","Col","Major","Sir","Lady","Rev",
"Dr","Don","Jonkheer","the Countess","Mrs",
"Ms","Mr","Mme","Mlle","Miss","Master"))
boxplot(df.train$Age ~ df.train$Title,
main="Passenger Age by Title", xlab="Title", ylab="Age")
## function for assigning a new title value to old title(s)
changeTitles <- function(data, old.titles, new.title) {
for (honorific in old.titles) {
data$Title[ which( data$Title == honorific)] <- new.title
}
return (data$Title)
}
## Title consolidation
df.train$Title <- changeTitles(df.train,
c("Capt", "Col", "Don", "Dr",
"Jonkheer", "Lady", "Major",
"Rev", "Sir"),
"Noble")
df.train$Title <- changeTitles(df.train, c("the Countess", "Ms"),
"Mrs")
df.train$Title <- changeTitles(df.train, c("Mlle", "Mme"), "Miss")
df.train$Title <- as.factor(df.train$Title)
require(plyr)     # for the revalue function
require(stringr)  # for the str_sub function
## test a character as an EVEN single digit
isEven <- function(x) x %in% c("0","2","4","6","8")
## test a character as an ODD single digit
isOdd <- function(x) x %in% c("1","3","5","7","9")
## function to add features to training or test data frames
featureEngrg <- function(data) {
## Using Fate ILO Survived because term is shorter and just sounds good
data$Fate <- data$Survived
## Revaluing Fate factor to ease assessment of confusion matrices later
data$Fate <- revalue(data$Fate, c("1" = "Survived", "0" = "Perished"))
## Boat.dibs attempts to capture the "women and children first"
## policy in one feature.  Assuming all females plus males under 15
## got "dibs' on access to a lifeboat
data$Boat.dibs <- "No"
data$Boat.dibs[which(data$Sex == "female" | data$Age < 15)] <- "Yes"
data$Boat.dibs <- as.factor(data$Boat.dibs)
## Family consolidates siblings and spouses (SibSp) plus
## parents and children (Parch) into one feature
data$Family <- data$SibSp + data$Parch
## Fare.pp attempts to adjust group purchases by size of family
data$Fare.pp <- data$Fare/(data$Family + 1)
## Giving the traveling class feature a new look
data$Class <- data$Pclass
data$Class <- revalue(data$Class,
c("1"="First", "2"="Second", "3"="Third"))
## First character in Cabin number represents the Deck
data$Deck <- substring(data$Cabin, 1, 1)
data$Deck[ which( is.na(data$Deck ))] <- "UNK"
data$Deck <- as.factor(data$Deck)
## Odd-numbered cabins were reportedly on the port side of the ship
## Even-numbered cabins assigned Side="starboard"
data$cabin.last.digit <- str_sub(data$Cabin, -1)
data$Side <- "UNK"
data$Side[which(isEven(data$cabin.last.digit))] <- "port"
data$Side[which(isOdd(data$cabin.last.digit))] <- "starboard"
data$Side <- as.factor(data$Side)
data$cabin.last.digit <- NULL
return (data)
}
## add remaining features to training data frame
df.train <- featureEngrg(df.train)
train.keeps <- c("Fate", "Sex", "Boat.dibs", "Age", "Title",
"Class", "Deck", "Side", "Fare", "Fare.pp",
"Embarked", "Family")
df.train.munged <- df.train[train.keeps]
set.seed(23)
training.rows <- createDataPartition(df.train.munged$Survived, p = 0.8, list = FALSE)
set.seed(23)
training.rows <- createDataPartition(df.train.munged$Survived, p = 0.8, list = FALSE)
df.train.munged$Survived
training.rows <- createDataPartition(df.train.munged, p = 0.8, list = FALSE)
set.seed(23)
training.rows <- createDataPartition(df.train.munged, p = 0.8, list = FALSE)
set.seed(23)
training.rows <- createDataPartition(df.train.munged$Survived,p = 0.8, list = FALSE)
set.seed(23)
training.rows <- createDataPartition(df.train.munged$Fate,p = 0.8, list = FALSE)
training.rows
? createDataPartition
train.batch <- df.train.munged[training.rows, ]
test.batch <- df.train.munged[-training.rows, ]
mean(train.batch$Fate)
mean(which(train.batch$Fate == Survived))
mean(which(train.batch$Fate == "Survived"))
mean(which(train.batch$Fate != "Survived"))
mean(which(test.batch$Fate != "Survived"))
mean(which(test.batch$Fate == "Survived"))
?glm
Titanic.logit.1 <- glm(Fate ~ Sex + Class + Age + Family + Embarked + Fare, data = train.batch, family=binomial("logit")
)
Titanic.logit.1
?pchisq
1 - pchisq(332.2, df=8)
anova(Titanic.logit.1, test="Chisq")
?glm
Titanic.logit.2 <- glm(Fate ~ Sex + Class + Age + Family + Embarked + Fare.pp,
data = train.batch, family=binomial("logit"))
anova(Titanic.logit.2, test="Chisq")
glm(Fate ~ Sex + Class + Age + Family + Embarked,
data = train.batch, family=binomial("logit")
)
?trainControl
cv.ctrl <- trainControl(method = "repeatedcv", repeats = 3,
summaryFunction = twoClassSummary,
classProbs = TRUE)
cv.ctrl
install.packages("RMySql")
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user = "genome", host= "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
getwd()
setwd("C:/Users/tiago_000/Documents//GitHub/R_progamming")
if(!file.exists("data_cleaning")){
dir.create("data_cleaning")
}
subject <-read.csv("./UCI HAR Dataset/train/subject_train.csv")
xtrain <-read.csv("./UCI HAR Dataset/train/x_train.csv")
ytrain <-read.csv("./UCI HAR Dataset/train/y_train.csv")
xtrain <-read.csv("./UCI HAR Dataset/train/x_train.csv")
getwd()
setwd("C:/Users/tiago_000/Documents//GitHub/R_progamming")
if(!file.exists("data_cleaning")){
dir.create("data_cleaning")
}
subject <-read.csv("./UCI HAR Dataset/train/subject_train.csv")
subject <-read.csv(".//UCI HAR Dataset//train//subject_train.csv")
subject <-read.csv("./UCI HAR Dataset//train//subject_train.csv")
ls
list.files()
setwd("C:/Users/tiago_000/Documents//GitHub/R_progamming/data_cleaning")
list.files()
setwd("C:/Users/tiago_000/Documents//GitHub/R_progamming/data_cleaning/UCI HAR Dataset")
list.files()
getwd()
setwd("C:/Users/tiago_000/Documents//GitHub/R_progamming")
if(!file.exists("data_cleaning")){
dir.create("data_cleaning")
}
subject <-read.csv("./UCI HAR Dataset//train//subject_train.txt")
subject <-read.csv("./UCI HAR Dataset/train/subject_train.txt")
subject <-read.table("./UCI HAR Dataset/train/subject_train.txt")
getwd()
subject <-read.csv("./data_cleaning/UCI HAR Dataset/train/subject_train.txt")
subject
subject <-read.csv("./data_cleaning/UCI HAR Dataset/train/subject_train.txt")
xtrain <-read.csv("./data_cleaning/UCI HAR Dataset/train/x_train.csv")
ytrain <-read.csv("./data_cleaning/UCI HAR Dataset/train/y_train.csv")
xtrain <-read.csv("./data_cleaning/UCI HAR Dataset/train/x_train.txt")
ytrain <-read.csv("./data_cleaning/UCI HAR Dataset/train/y_train.txt")
head(xtrain)
xtrain[1]
subject <-read.table("./data_cleaning/UCI HAR Dataset/train/subject_train.txt", sep="\t", col.names=c("sbusject"), fill=FALSE,strip.white=TRUE)
subject
head(subject)
xtrain <-read.csv("./data_cleaning/UCI HAR Dataset/train/x_train.txt", sep="\t", fill=FALSE,strip.white=TRUE)
head(xtrain)
xtrain <-read.csv("./data_cleaning/UCI HAR Dataset/train/x_train.txt", sep=" ", fill=FALSE,strip.white=TRUE)
?read.table
length(xtrain)
xtrain <-read.table("./data_cleaning/UCI HAR Dataset/train/x_train.txt", sep=" ", fill=FALSE,strip.white=TRUE)
ytrain <-read.csv("./data_cleaning/UCI HAR Dataset/train/y_train.txt")
ytrain <-read.csv("./data_cleaning/UCI HAR Dataset/train/y_train.txt", col.names=c("subject"), fill=FALSE,strip.white=TRUE)
head(ytrain)
ytrain <-read.csv("./data_cleaning/UCI HAR Dataset/train/y_train.txt", col.names=c("label"), fill=FALSE,strip.white=TRUE)
body_acc_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", col.names=c("body_acc_x_train"), fill=FALSE,strip.white=TRUE)
body_acc_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", col.names=c("body_acc_x_train"), fill=FALSE,strip.white=TRUE)
body_acc_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", col.names=c("body_acc_x_train"), fill=FALSE,strip.white=TRUE)
body_acc_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", col.names=c("body_acc_x_train"), fill=FALSE,strip.white=TRUE)
body_acc_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", col.names=c("body_acc_x_train"), fill=FALSE,strip.white=TRUE)
body_acc_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", col.names=c("body_acc_x_train"), fill=FALSE,strip.white=TRUE)
body_acc_y_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_y_train.txt", col.names=c("body_acc_y_train"), fill=FALSE,strip.white=TRUE)
body_acc_z_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_z_train.txt", col.names=c("body_acc_z_train"), fill=FALSE,strip.white=TRUE)
total_acc_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/total_acc_x_train.txt", col.names=c("total_acc_x_train"), fill=FALSE,strip.white=TRUE)
total_acc_y_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/total_acc_y_train.txt", col.names=c("total_acc_y_train"), fill=FALSE,strip.white=TRUE)
total_acc_z_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/total_acc_z_train.txt", col.names=c("total_acc_z_train"), fill=FALSE,strip.white=TRUE)
body_gyro_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_gyro_x_train.txt", col.names=c("body_gyro_x_train"), fill=FALSE,strip.white=TRUE)
body_gyro_y_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_gyro_y_train.txt", col.names=c("body_gyro_y_train"), fill=FALSE,strip.white=TRUE)
body_gyro_z_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_gyro_z_train.txt", col.names=c("body_gyro_z_train"), fill=FALSE,strip.white=TRUE)
head(body_gyro_z_train)
body_acc_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", col.names=c("body_acc_x_train"))
body_acc_y_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_y_train.txt", col.names=c("body_acc_y_train"))
body_acc_z_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_z_train.txt", col.names=c("body_acc_z_train"))
total_acc_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/total_acc_x_train.txt", col.names=c("total_acc_x_train"))
total_acc_y_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/total_acc_y_train.txt", col.names=c("total_acc_y_train"))
total_acc_z_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/total_acc_z_train.txt", col.names=c("total_acc_z_train"))
body_gyro_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_gyro_x_train.txt", col.names=c("body_gyro_x_train"))
body_gyro_y_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_gyro_y_train.txt", col.names=c("body_gyro_y_train"))
body_gyro_z_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_gyro_z_train.txt", col.names=c("body_gyro_z_train"))
head(body_gyro_z_train)
body_acc_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", col.names=c("body_acc_x_train"),sep="  ")
body_acc_y_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_y_train.txt", col.names=c("body_acc_y_train"),sep="  ")
body_acc_z_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_z_train.txt", col.names=c("body_acc_z_train"),sep="  ")
total_acc_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/total_acc_x_train.txt", col.names=c("total_acc_x_train"),sep="  ")
total_acc_y_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/total_acc_y_train.txt", col.names=c("total_acc_y_train"),sep="  ")
total_acc_z_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/total_acc_z_train.txt", col.names=c("total_acc_z_train"),sep="  ")
body_gyro_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_gyro_x_train.txt", col.names=c("body_gyro_x_train"),sep="  ")
body_gyro_y_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_gyro_y_train.txt", col.names=c("body_gyro_y_train"),sep="  ")
body_gyro_z_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_gyro_z_train.txt", col.names=c("body_gyro_z_train"),sep="  ")
head(body_gyro_z_train)
body_acc_x_train <-read.csv("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", col.names=c("body_acc_x_train"),sep="  ")
body_acc_x_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", col.names=c("body_acc_x_train"),sep="  ")
body_acc_y_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_y_train.txt", col.names=c("body_acc_y_train"),sep="  ")
body_acc_z_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_z_train.txt", col.names=c("body_acc_z_train"),sep="  ")
total_acc_x_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/total_acc_x_train.txt", col.names=c("total_acc_x_train"),sep="  ")
total_acc_y_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/total_acc_y_train.txt", col.names=c("total_acc_y_train"),sep="  ")
total_acc_z_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/total_acc_z_train.txt", col.names=c("total_acc_z_train"),sep="  ")
body_gyro_x_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_gyro_x_train.txt", col.names=c("body_gyro_x_train"),sep="  ")
body_gyro_y_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_gyro_y_train.txt", col.names=c("body_gyro_y_train"),sep="  ")
body_gyro_z_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_gyro_z_train.txt", col.names=c("body_gyro_z_train"),sep="  ")
head(body_gyro_z_train)
body_acc_x_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", col.names=c("body_acc_x_train"),sep="  ")
body_acc_x_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", col.names=c("body_acc_x_train"))
body_acc_x_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt")
head(body_acc_x_train)
head(body_acc_x_train,10)
xtrain <-read.table("./data_cleaning/UCI HAR Dataset/train/x_train.txt")
head(xtrain)
length(body_acc_x_train$V1)
length(ytrain)
ytrain <-read.csv("./data_cleaning/UCI HAR Dataset/train/y_train.txt", col.names=c("label"))
ytrain
length(ytrain)
length(ytrain$label)
length(body_acc_x_train$V1)
str(body_acc_x_train$V1)
is.na(body_acc_x_train$V1)
which(is.na(body_acc_x_train$V1))
is.null(body_acc_x_train$V1)
length(body_acc_x_train$V1)
head(body_acc_x_train,10)
tail(body_acc_x_train,10)
body_acc_x_train == " "
which(body_acc_x_train$V1 == " ")
body_acc_x_train$V1 == " "
length(ytrain$label)
length(body_acc_x_train$V1)
head(body_acc_x_train$V1,10)
summary(body_acc_x_train$V1,10)
body_acc_x_train <-read.table("./data_cleaning/UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", na.strings = c("NA", "") )
ytrain <-read.csv("./data_cleaning/UCI HAR Dataset/train/y_train.txt", col.names=c("label"), na.strings = c("NA", "") )
length(body_acc_x_train$V1)
str(body_acc_x_train$V1)
summary(body_acc_x_train$V1,10)
is.na(body_acc_x_train$V1)
which(is.na(body_acc_x_train$V1))
